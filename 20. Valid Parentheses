public class Solution {
    // public boolean isValid(String s) {
    //         Stack<Character> stack = new Stack<Character>();
    //     for (Character c : s.toCharArray()) {
	   // if ("({[".contains(String.valueOf(c))) {
    //             stack.push(c);
    //         } else {
    //           if (!stack.isEmpty() && is_valid(stack.peek(), c)) {
    //               stack.pop();
    //           } else {
    //               return false;
    //           }
    //       }
    //   }
    //   return stack.isEmpty();
    // }

    // private boolean is_valid(char c1, char c2) {
    //     return (c1 == '(' && c2 == ')') || (c1 == '{' && c2 == '}')
    //         || (c1 == '[' && c2 == ']');
    // }
    
    public boolean isValid (String s) {
 		if (s == null || s.length() == 0) {
 			return false;
 		}

 		int count = 0;
 		int length = s.length();
 		Stack<Character> stack = new Stack<Character>();
 		for (int i = 0; i < length; i++) {
 			if (!stack.empty() && (is_valid(stack.peek(),s.charAt(i)))) {
 				stack.pop();
 				count++;
 			} else {
 				stack.push(s.charAt(i));
 			}
 		}

 		if (stack.empty()) {
 			return count >= 0;
 		}
 		
 	
 		return false;
 	}
 		 private boolean is_valid(char c1, char c2) {
        return (c1 == '(' && c2 == ')') || (c1 == '{' && c2 == '}')
            || (c1 == '[' && c2 == ']');

    }
}
