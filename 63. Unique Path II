public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        //  int m = obstacleGrid.length;
        //  int n = obstacleGrid[0].length;
        // // use dp

        // Integer[][] map = new Integer[m][n];
        
        // if(obstacleGrid[0][0] == 1){
        //     return 0;
        // }else{
        //     map[0][0] = 1;
        // }
        
        // for(int i = 1; i<m;i++){
        //     if(map[i-1][0] != 0){
        //         map[i][0] = 1;
        //     }
        //     if(obstacleGrid[i][0] == 1){
        //         map[i][0] = 0;
        //     }
        // }
        // for(int j= 1;j<n;j++){
        //     if(map[0][j-1] != 0){
        //       map[0][j] = 1; 
        //     }
        //     if(obstacleGrid[0][j] == 1){
        //         map[0][j] = 0;
        //     }
        // }
        // for(int i = 1;i < m;i++){
        //     for(int j = 1; j < n;j++){
        //         if(i != 0 && j!= 0)
        //             map[i][j] = map[i-1][j] + map[i][j-1];
        //         if(obstacleGrid[i][j] == 1){
        //             map[i][j] = 0;
        //         }
        //     }
        // }
        // return map[m-1][n-1];
        
         //Empty case
        if(obstacleGrid.length == 0) return 0;
        
        int rows = obstacleGrid.length;
        int cols = obstacleGrid[0].length;
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(obstacleGrid[i][j] == 1)
                    obstacleGrid[i][j] = 0;
                else if(i == 0 && j == 0)
                    obstacleGrid[i][j] = 1;
                else if(i == 0)
                    obstacleGrid[i][j] = obstacleGrid[i][j - 1] * 1;// For row 0, if there are no paths to left cell, then its 0,else 1
                else if(j == 0)
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] * 1;// For col 0, if there are no paths to upper cell, then its 0,else 1
                else
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
            }
        }
        
        return obstacleGrid[rows - 1][cols - 1];
    
    }
}
